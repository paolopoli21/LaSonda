import { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import { Subscription } from 'rxjs';
import { IVulnerability } from 'src/app/models/IVulnerability';
import { ShareService } from 'src/app/services/share.service';
import { VulneratilityService } from 'src/app/services/vulneratility.service';
import { VulnerabilityDetailJsonComponent } from '../vulnerability-detail-json/vulnerability-detail-json.component';
//import { vulneratilityService } from 'src/app/services/vulneratility.service';

@Component({
  selector: 'app-vulnerabily',
  templateUrl: './vulnerability.component.html',
  styleUrls: ['./vulnerability.component.css']
})
export class VulnerabilityComponent implements OnInit,OnDestroy{
 
  listLength: number = 100;

  displayedColumns: string[] = ['iD_Wazuh', 'name' ,'ip','scanDate','affectedItems'];

  public vulnerabilitiesSubcription?: Subscription;

  public list: IVulnerability[] = [];
  public dataSource: MatTableDataSource<IVulnerability> = new MatTableDataSource<IVulnerability>([]);
  public backupSelected?: IVulnerability;

  public isLoading: Boolean = true;
  public currentFilterValue: string = '';

  titlePage = "Vulnerabilities";

  @ViewChild(MatSort, {static:true}) sort: any;
  @ViewChild(MatPaginator, {static:true}) paginator: any;

  constructor(
    private shareService: ShareService,
    private vulneratilityService: VulneratilityService,
    public dialog: MatDialog){

  }

  ngOnDestroy(): void {
    this.vulnerabilitiesSubcription?.unsubscribe();
  }
  // ngAfterViewInit(): void {
  //   throw new Error('Method not implemented.');
  // }
  ngOnInit(): void {
    this.updateList();
  }

  private getAllList(){
    this.isLoading = true;
    this.vulnerabilitiesSubcription = this.vulneratilityService.VulnerabilitiesRefresher$
      .subscribe((resp: IVulnerability[])=>{
        this.list = resp;
        this.dataSource = new MatTableDataSource(this.list);
        this.dataSource.sort = this.sort;
        this.dataSource.paginator = this.paginator;
        this.dataSource.paginator?.firstPage();
        this.isLoading = false;
        this.dataSource.filter = this.currentFilterValue.trim().toLowerCase(); 
      if (this.dataSource.paginator) {
        this.dataSource.paginator.firstPage();
      }
        console.log("vulnerabilities",this.list);
    },
    error =>{
      console.log("Errore Vulnerabilities ",error.message);
      this.shareService.alertUpdate("Errore caricamento lista vulnerabilities  --> " + error.message, 20000);
    }
    );
  }

  updateList(){
    //this.backupServic.backupsRefresher$;
    this.vulneratilityService.loadVulnerabilities();
    this.getAllList();
    this.dataSource.filter = this.currentFilterValue.trim().toLowerCase(); 
    if (this.dataSource.paginator) {
      this.dataSource.paginator.firstPage();
    }
  }

  applyFilter(event: Event){
    const filterValue = (event.target as HTMLInputElement).value;
    this.currentFilterValue = filterValue;
    this.dataSource.filter = filterValue.trim().toLowerCase();
    if (this.dataSource.paginator) {
      this.dataSource.paginator.firstPage();
    }
  }

  getBackgroundColorRow(row: IVulnerability){
    if(row.jsonData != null){
      return "classBackcolorRed";
    }
    if(row.jsonData == null){
      return "classBackcolorGreen";
    }
    return "";
  }

  openDialog(row: IVulnerability) {

    if(row.jsonData != null){
          this.dialog.open(VulnerabilityDetailJsonComponent,{
          data: {
            row: row.jsonData,
            tittle: row.name
          }
        });

    }


    //this.dialog.open(VulnerabilityDetailJsonComponent);
    //this.selectRow(rowDataProcessResult);
    //rowDataProcessResult.idCheck
    // this.dataProcessResultSubcription = this.dataProcessService.LoadRefresherDataProcessResultByIdCheck(rowDataProcessResult.idCheck).subscribe((row: IDataProcess) =>{
    //   if(row == null){
    //     //alert("Non ci sono dettagli");
    //     return;
    //   }
    //   if(!row.isJSON){
    //     this.dialog.open(VdetailDataprocessNojsonComponent,{
    //       data: {
    //         row,
    //         tittle: rowDataProcessResult.nome
    //       }
    //     });
    //   }
    //   else{
    //     this.dialog.open(VdetailDataprocessComponent,{
    //       data: {
    //         row,
    //         tittle: rowDataProcessResult.nome
    //       }
    //     });
    //   }
    // });

  }
}
